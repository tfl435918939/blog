---
layout:     post
title:      "Java集合继承关系"
subtitle:   " \"人生就像一场马拉松，跑到最后才是赢家。\""
date:       2018-04-07 22:02:00
author:     "Leon"
header-img: "img/2018-04-03-posts-bg.jpg"
catalog: true
tags:
    - JVM
---

> “Anyway, anyhow. ”


## Java集合继承关系
在讨论Java集合继承关系之前，我想先放一张图片：[Java集合继承关系图](http://note.youdao.com/noteshare?id=e6a0fb24d9110bcbb7d6970f412ac8d1&sub=28C48EF3DD724CFFA50D7F88F77D67F4)。


## Set和List

### Set
Set是对数学上集的抽象。Set中的元素特点是：无序和唯一。允许有NULL值，但只允许有一个。对于任意的非null元素e1和e2,都满足e1.equals(e2)==false。

Object.hashcode()的约定:
a.在程序的一次执行中,无论何时在同一个java对象上重复调用hashcode(),都必须一致地返回同一个整数值,并不像Object.equals()那样提供Object是否被修改了的信息,但这个整数值不必在同一个应用程序的多次运行之间保持一致。
b.如果两个Object通过equals()判断是相等的,那么,在这两个Object上调用hashcode()必返回相同的值。
c.如果两个Object通过equals()判断是不相等的,那么,并不要求这两个Object.hashcode()返回不同的整数值。

#### Set实现
- HashSet是使用一个哈希表存储元素的，是非排序的，可以随机访问，是Set的最优性能实现。可以放入NULL值，但只能放入一个。
- TreeSet实现了SortedSet接口,使用一个红黑树数据结构来存储元素,提供了元素的有序存储和访问，不允许放入NULL值。

##### HashSet
 HashSet在底层实现上依赖于HashMap.
 ```
  // HashSet的代码片断:
  // Dummy value to associate with an Object in the backing Map
    private static final Object PRESENT = new Object();

    public HashSet() {
 		map = new HashMap<E,Object>();
    }

    public boolean add(E o) {
 		return map.put(o, PRESENT)==null;
    }

    public boolean remove(Object o) {
 		return map.remove(o)==PRESENT;
    }

    public boolean contains(Object o) {
        return map.containsKey(o);
    }
```
从代码可见,HashSet在底层借用HashMap，使用一个Object类型的哑元值作为HashSet中元素在底层HashMap存储中的映射值。**它抓住了HashMap的键不允许重复的特性。**对于add()中调用底层映射的put(),将欲添加的元素和一个PRESENT哑元值放入底层map。如果底层Map返回null，说明原来的集合中并不存在该键。对于Map接口的put()返回null时有两种解释,一是原来的Map中不包含该键；另一种可能是原来的Map中已经存储了该健，但该键映射到null。**而在HashSet中的add()和remove()等中的返回null只有一种解释，即原来的集合不包含该元素。这是因为HashSet的底层的映射中存储的都是一个名为PRESENT的Object类型的对象，不可能是null。**

##### TreeSet
Set接口有一个子接口：SortedSet，提供了集合元素的顺序存储，其中元素保持升序排列。为了在加入一个元素到SortedSet实现时能对这些元素排序，元素类型必须实现Comarable接口，或者建立SortedSet时使用Comparator。否则程序在运行时将抛出ClassCastException。

##### 适用场景分析
HashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。

### List
List 是一个元素有序的、可以重复、可以为 null 的集合（有时候我们也叫它“序列”）。
Java 集合框架中最常使用的几种 List 实现类是 ArrayList，LinkedList 和 Vector。在各种 List 中，最好的做法是以 ArrayList 作为默认选择。当插入、删除频繁时，使用 LinkedList。
ArrayList的本质是一个数组。LinkedList的本质是双向链表。因此List的元素在存储时互不干扰，没有什么依赖关系，自然可以重复。

List 中除了继承 Collection 的一些方法，还提供以下操作：
- 位置相关：``List``和 数组一样，都是从``0``开始，我们可以根据元素在``list``中的位置进行操作，比如说 ``get``，``set``，``add``，``addAll``，``remove``；
- 搜索：从``list``中查找某个对象的位置，比如 ``indexOf``，``lastIndexOf``；
- 迭代：使用``Iterator``的拓展版迭代器``ListIterator``进行迭代操作；
- 范围性操作：使用``subList``方法对``list``进行任意范围的操作。subList持有List 同一个引用，所以对subList进行的操作也会影响到原有List。

List 继承了 Collection 的 iterator() 方法，可以获取 Iterator，使用它可以进行向后遍历。
在此基础上，List 还可以通过 listIterator(), listIterator(int location) 方法（后者指定了游标的位置）获取更强大的迭代器 ListIterator。
使用 ListIterator 可以对 List 进行向前、向后双向遍历，同时还允许进行 add, set, remove 等操作。

和 Set，Map 一样，List 中如果想要根据两个对象的内容而不是地址比较是否相等时，需要重写 ``equals()``和``hashCode()``方法。

##### ArrayList和LinkedList比较
ArrayList：
优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。
缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。   

由于``ArrayList``不是同步的，所以在并发访问时，如果在迭代的同时有其他线程修改了``ArrayList``, fail-fast 的迭代器``Iterator/ListIterator``会报``ConcurrentModificationException``错。
因此我们在并发环境下需要外部给``ArrayList``加个同步锁，或者直接在初始化时用 ``Collections.synchronizedList``方法进行包装：
```
List list = Collections.synchronizedList(new ArrayList(...));
```

LinkedList：
优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。
缺点：因为LinkedList要移动指针,所以查询操作性能比较低。

## Map
Map不是Collection的子接口或实现类。Map是一个接口。Map的每个Entry都持有连个对象：Key和Value。在Map中Key值要保持唯一，Value可以重复（该规则适用于NULL值）。

在哈希术语中，内部数组中的每个位置称作“存储桶”(bucket)，而可用的存储桶数（即内部数组的大小）称作容量 (capacity)，通常为2的整数次幂。Map中KV的总数称做Size（大小）。为使 Map 对象有效地处理任意数目的项，Map 实现可以调整自身的大小。 但调整大小的开销很大。 调整大小需要将所有元素重新插入到新数组中，这是因为不同的数组大小意味着对象现在映射到不同的索引值。 先前冲突的键可能不再冲突，而先前不冲突的其他键现在可能冲突。这显然表明，如果将 Map 调整得足够大，则可以减少甚至不再需要重新调整大小，这很有可能显著提高速度。

#### 使用负载因子

为确定何时调整大小，而不是对每个存储桶中的链接列表的深度进行记数，基于哈希的 Map 使用一个额外参数并粗略计算存储桶的密度。 Map 在调整大小之前，使用名为“负载因子”的参数指示 Map 将承担的“负载”量，即它的负载程度。负载因子、项数（Map 大小）与容量之间的关系简单明了：

如果``loadFactor x capacity = threshold < size ``，则调整 Map的capacity。

负载因子本身是空间和时间之间的调整折衷。增大负载因子可以减少hash表的内存空间，
这个内存空间指的是初始容量initialCapacity构造hash表所产生的空间，
在容量极限(threshold）一定时，负载因子越大，则实际容量（capacity）越小，即所需初始容量（initialCapacity）越小，则初始构造的hash表所占空间越小。

较小的负载因子将占用更多的空间，但将降低冲突的可能性，从而将加快访问和更新的速度。使用较大的负载因子会增加冲突的几率。 

### HashMap
### ConcurrentHashMap
### TreeMap
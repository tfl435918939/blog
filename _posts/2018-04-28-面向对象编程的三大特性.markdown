---
layout:     post
title:      "面向对象编程的三大特性"
subtitle:   " \"人生就像一场马拉松，跑到最后才是赢家。\""
date:       2018-04-28 11:18:00
author:     "Leon"
header-img: "img/2018-04-03-posts-bg.jpg"
catalog: true
tags:
    - Java
---

> “Anyway, anyhow. ”


## 封装
封装从字面上的意思就是包装。一个物体加上用盒子装起来，我们就看不到内部的所有具体细节，也就是所说的信息隐藏。但是如果把所有的细节都隐藏起来，不与外界交互那么就无法跟外界产生联系，这也违反了初衷，因此在用盒子包装起来的同时，会在盒子上面开几个小窗口。也就相当于一个商品包装的严严实实的，顾客什么都看不到，当然就不会购买；如果完全不包装，商品的安全性则无法得到保障(摔坏)。

也就是说，利用抽象数据类型将数据和基于对数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。系统的其他对象只能通过包裹在数据外面的已经授权的操作来与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节，但可以通过该对象对外的提供的接口来访问该对象。

对于封装而言，**一个对象封装的是它自己的属性和方法**。不需要依赖其他的对象就能完成自己的操作。

##### 封装的好处
- 良好的封装能够减少耦合。
- 类内部的结构可以自由修改，对成员进行精准控制。
- 隐藏信息和实现细节。

封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果不想被外界方法，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。

## 继承
##### 介绍
继承的语义是“is-a”。如果有两个对象A和B，若可以描述为“A是B”，则可以表示A继承自B，B是A的父类或者超类。A是B的子类或者派生类。A是继承者，B是被继承者。

实际上继承者是被继承者的特殊化，它除了拥有被继承者的特性外，还拥有自己独有得特性。例如猫有抓老鼠、爬树等其他动物没有的特性。同时在继承关系中，继承者完全可以替换被继承者，反之则不可以，例如我们可以说猫是动物，但不能说动物是猫就是这个道理，其实对于这个我们将其称之为“向上转型”。

使用继承时，需要知道的几点：
- 子类拥有父类非``private``的属性和方法。
- 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。
- 子类可以用自己的方式实现父类的方法。


##### 构造器
通过前面我们知道子类可以继承父类的属性和方法，除了那些private的外还有一样是子类继承不了的——构造器。对于构造器而言，它只能够被调用，而不能被继承。调用父类的构造方法我们使用``super()``即可。

构建过程是从父类“向外”扩散的，也就是从父类开始向子类一级一级地完成构建。而且我们并没有显示的引用父类的构造器，这就是java的聪明之处：编译器会默认给子类调用父类的构造器。

但是，这个默认调用父类的构造器是有前提的：父类有默认构造器。如果父类没有默认构造器，我们就要必须显示的使用``super()``来调用父类构造器，否则编译器会报错：无法找到符合父类形式的构造器。

第一行代码——对于继承而言，子类会默认调用父类的构造器，但是如果没有默认的父类构造器，子类必须要显示的指定父类的构造器，而且必须是在子类构造器中做的第一件事。

##### protected关键字
``private``访问修饰符，对于封装而言，是最好的选择，但这个只是基于理想的世界，有时候我们需要这样的需求：我们需要将某些事物尽可能地对这个世界隐藏，但是仍然允许子类的成员来访问它们。这个时候就需要使用到``protected``。
对于protected而言，它指明就类用户而言，他是``private``，但是对于任何继承与此类的子类而言或者其他任何位于同一个包的类而言，他却是可以访问的。

##### 向上转型
在上面的继承中我们谈到继承是``is-a``的相互关系，猫继承与动物，所以我们可以说猫是动物，或者说猫是动物的一种。这样将猫看做动物就是向上转型。

## 多态
##### 介绍
指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而对于子类中存在而父类中不存在的方法，该引用是不能使用的，尽管是重载该方法。若子类重写了父类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（动态连接、动态调用）。
    
对于面向对象而言，多态分为编译时多态和运行时多态。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。

##### 多态实现的条件
Java实现多态有三个必要条件：``继承``、``重写``、``向上转型``。
- 继承：在多态中必须存在有继承关系的子类和父类。
- 重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。
- 向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。
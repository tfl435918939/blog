---
layout:     post
title:      "TCP连接的建立和断开"
subtitle:   " \"人生就像一场马拉松，跑到最后才是赢家。\""
date:       2018-04-27 17:02:00
author:     "Leon"
header-img: "img/2018-04-03-posts-bg.jpg"
catalog: true
tags:
    - 计算机网络
---

> “Anyway, anyhow. ”


## 三次握手
- 第一次握手：主机A发送位码为``SYN＝1``,随机产生``Seq Number=10001``的数据包到服务器，主机B由``SYN=1``知道，A要求建立联机，此时状态为``SYN_SENT``； 
- 第二次握手：主机B收到请求后要确认联机信息，向A发送``ACK Number=(主机A的Seq+1)``,``SYN＝1``,``ACK＝1``,随机产生``Seq Number=20001``的包，此时状态由LISTEN变为SYN_RECV； 
- 第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1),``ACK=1``，主机B收到后确认seq值与``ACK=1``则连接建立成功，双方状态ESTABLISHED。

完成三次握手，主机A与主机B开始传送数据。

##### 过程图解

<img class="shadow" src="/blog/img/tcp.jpg" width="780" height="780">

##### 四次挥手
- ``FIN_WAIT_1``: 当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即 进入到``FIN_WAIT_1``状态。而当对方回应ACK报文后，则进入到``FIN_WAIT_2``状态，当然在实际的正常情况下，无论对方何种情况下，都应该马 上回应ACK报文，所以``FIN_WAIT_1``状态一般是比较难见到的，而``FIN_WAIT_2``状态还有时常常可以用netstat看到。 
- ``FIN_WAIT_2``：上面已经详细解释了这种状态，实际上``FIN_WAIT_2``状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。 
- ``TIME_WAIT``: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果``FIN_WAIT_1``状态下，收到了对方同时带 FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过``FIN_WAIT_2``状态。  
- ``CLOSE_WAIT``: 等待关闭连接。当对方关闭一个SOCKET后发送FIN报文，本机应该马上回应ACK报文，进入``CLOSE-WAIT``状态。接下来是察看本次连接是否还有数据发送给对方，如果没有的话，那么你也可以 close这个SOCKET，发送FIN报文给对方，关闭连接。 
- ``LAST_ACK``: 它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。


#### 常问问题
**为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？ **


这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的建连请求后，它可以把ACK和SYN（ACK起应答作用，而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你不必马上关闭SOCKET,也可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以关闭连接时ACK报文 和FIN报文多数情况下都是分开发送的。


**为什么TIME_WAIT状态还需要等2MSL后才能返回到CLOSED状态？**

因为虽然双方都同意关闭连接了，而且握手的4个报文也都发送完毕，按理可以直接回到CLOSED 状态(就好比从SYN_SENT 状态到ESTABLISH 状态那样)，但是我们必须假想网络是不可靠的，你无法保证你(客户端)最后发送的ACK报文一定会被对方收到，就是说对方处于LAST_ACK 状态下的SOCKET可能会因为超时未收到ACK报文，而重发FIN报文，所以这个TIME_WAIT 状态的作用就是用来重发可能丢失的ACK报文。


**关闭TCP连接一定需要4次挥手吗? **

不一定，4次挥手关闭TCP连接是最安全的做法。但在有些时候，我们不喜欢TIME_WAIT 状态(如当MSL数值设置过大导致服务器端有太多TIME_WAIT状态的TCP连接，减少这些条目数可以更快地关闭连接，为新连接释放更多资源)，这时我们可以通过设置SOCKET变量的SO_LINGER标志来避免SOCKET在close()之后进入TIME_WAIT状态，这时将通过发送RST强制终止TCP连接(取代正常的TCP四次握手的终止方式)。但这并不是一个很好的主意，TIME_WAIT 对于我们来说往往是有利的。

MSL就是maximum segment lifetime(最大分节生命期），这是一个IP数据包能在互联网上生存的最长时间，超过这个时间IP数据包将在网络中消失 。